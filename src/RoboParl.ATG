from SymbolTable import *
from Quadruple import Quad
from Quadruple import QuadGen
from Quadruple import opHierarchy
from Semantics import mOp
from Semantics import SemAnalysis

COMPILER RoboParl
   TYPES = {'Int': 0, 'Double' : 1, 'Bool' : 2, 'String' : 3, 'List' : 4, 'Robot' : 5, 'Void' : 6}
   TYPE_LIST = ['Int', 'Double', 'Bool', 'String', 'List', 'Robot', 'Void']
   symTable = SymbolTableHandler()
   semA = SemAnalysis()
   quads = QuadGen()
   typeStack = []
   currentProc = None

   def declareVar(self, sym):
      if not self.symTable.symbolDecl(sym):
         self.SemErr("Symbol %s is already defined." %sym.symId)

   def useVar(self, symId):
      if not self.symTable.symbolUse(symId):
         self.SemErr("Symbol %s is undefined." %symId)

   def getType(self, t):
      return self.TYPES[t]

   def typeVar(self,symId):
      if self.symTable.getSymbol(symId) is not None:
         return self.symTable.getSymbol(symId).symType
      else:
         return -1

CHARACTERS
   digit = '0'..'9'. 
   digitNoZero = digit - '0'.
   alpha = 'A'..'Z' + 'a'..'z'.
   alphanum = alpha + digit.
   string = alphanum + ' ' + "!@#$%^&_()[]{}+=-*<>,.;:/".

TOKENS
   idConst     =  alpha{alphanum | '_'}.
   intConst    =  '0' | digitNoZero {digit}.
   doubleConst =  ('0' | digitNoZero {digit}) '.' ('0' | {digit}).
   stringConst =  '"' {string} '"'.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "#" TO '\n'

IGNORE '\r' + '\n' + '\t'

PRODUCTIONS

   RoboParl       
      =     
         "Program"               (.
                                    # declare global procedure
                                    proc = Procedure("__Global__",-1)
                                    self.declareVar(proc)
                                    self.currentProc = proc 
                                 .)
         [GlobalVars]
         Tasks 
         "End"
                                 (.
                                    for x in self.quads.quads:
                                       print(x.toStr())
                                 .)
         .

   GlobalVars
      =     
         (VarDec | VarOp)
         [NxtGlobalVar]
         .

   NxtGlobalVar 
      =     
         GlobalVars
         .

   VarDec
      =  
         SYNC   
         "Var" 
         Type<out type>                 
         idConst                 (. 
                                    # declare a new symbol in the table
                                    symId = self.LexString() 
                                    sym = Symbol(symId,type)
                                    self.declareVar(sym)

                                    # add symbol to procedures local variables
                                    self.currentProc.addLocalVar(sym)
                                    print ("Se agrego a proc %s la var %s" % (self.currentProc.symId, symId))

                                 .)
         ['='
                                 (.
                                    self.semA.pushType(type)
                                    self.semA.pushOp(self.LexString())
                                    
                                 .)
         Expression
                                 (.
                                    self.quads.assignmentQuad(symId)
                                    if not self.semA.checkOp():
                                       self.SemErr("Invalid assginment")
                                 .)
         ]
         SYNC
         ';'
         .

   VarOp
      =
         idConst                    (.
                                          # check if id is declared
                                          sym = self.symTable.getSymbol(self.LexString())
                                          if sym is None:
                                             self.SemErr("Symbol %s is undefined." %self.LexString())
                     
                                       .) 
         (RobotFunc 
         | 
         '=' 
                                    (.
                                          self.semA.pushType(sym.symType)
                                          self.semA.pushOp(self.LexString())
                                       
                                    .)
         Expression
                                    (.
                                       self.quads.assignmentQuad(sym.symId)
                                       if not self.semA.checkOp():
                                          self.SemErr("Invalid assginment")
                                    .)
         |
         TaskCall) 
         SYNC
         ';'
         .

   Type<out type>
      =  SYNC
      ("Robot" | "Int" | "Double" | "Bool" | "String"  | "Void" | "List")                        
                                    (.
                                       if(self.LexString() not in self.TYPE_LIST):
                                          self.SemErr("Invalid Type %s" %(self.LexString()))
                                          type = 0
                                       else:
                                          type = self.TYPES[self.LexString()]
                                       
                                    .) 
      .

   Expression
      =     
         Exp 
         [('>' | '<' | ">=" | "<=" | "==" | "!=") 
                     (.
                        self.quads.handleOp(self.LexString())
                        self.semA.pushOp(self.LexString())              
                     .)
         Exp
                     (.
                        if not self.semA.checkOp():
                           self.SemErr("Invalid operation")

                     .)
         ]
                     (.
                        self.quads.flushOps()

                     .)
         .

   Exp
      =     
      Term 
      [('+'
      | 
      '-') 
                     (.
                        self.quads.handleOp(self.LexString())
                        self.semA.pushOp(self.LexString())
                        
                     .)
      Exp
                     (.
                        if not self.semA.checkOp():
                           self.SemErr("Invalid operation")
                     .)
      ].

   Term
      =     
         Factor
         [('*'
         | 
         '/' 
         | 
         '%')
                     (.
                        self.semA.pushOp(self.LexString())
                        self.quads.handleOp(self.LexString())
                        
                     .) 
         Term     
                     (.
                        if not self.semA.checkOp():
                           self.SemErr("Invalid operation")
                     .)
         ]
         .

   Factor
      =     
         '(' 
                     (.
                        self.quads.pushFloor()
                        
                     .)
         Expression
         ')' 
                     (.
                        self.quads.popFloor()
                        
                     .)
         | 
         '-' 
         Constant
         
         | 
         Constant
         .           

   Constant
      =
         idConst   
                     (.
                        symId = self.LexString()
                        self.useVar(symId)
                        symType = self.typeVar(symId)
                        self.semA.pushType(symType)
                        self.quads.handleVar(symId)
                        
                     .)              
         | 
         intConst    (. 
                        self.quads.handleVar(self.LexString())
                        self.semA.pushType(0)
                     .)
         | 
         doubleConst  
                     (.   
                        self.quads.handleVar(self.LexString()) 
                        self.semA.pushType(1)
                     .)
         | 
         "True"
                        (.   
                              
                              self.quads.handleVar(self.LexString())
                              self.semA.pushType(2)
                             
                        .)
         |
         "False"
                         (.   
                              
                              self.quads.handleVar(self.LexString())
                              self.semA.pushType(2)
                             
                        .)
         | 
         stringConst 
                        (.    
                           self.quads.handleVar(self.LexString()) 
                           self.semA.pushType(3)
                        .)
         |
         List           
                        (.
                           self.semA.pushType(4)
                        .)
         .
   List
      = '[' ListItems ']'.

   ListItems
      =  Expression [NxtListItem].

   NxtListItem
      = ',' ListItems.

   Arguments
      = Expression [NxtArgument].

   NxtArgument
      =  ',' Arguments.

   Tasks
      =  
         SYNC
         Type<out type>      
         "Task" 
         idConst                       (. 
                                          # declare a new procedure in the table
                                          procId = self.LexString()
                                          proc = Procedure(procId,type) 
                                          self.declareVar(proc)

                                          # enter a new scope
                                          self.symTable.scopeEntry()

                                          # set current procedure
                                          self.currentProc = proc
                                       .)
         '(' [Params] ')' 
                                       (.
                                          # set procedures starting point
                                          proc.addr = Quad.QuadId+1
                                       .)
         Block "End"                   
                                       (.
                                          # exit scope
                                          self.symTable.scopeExit()
                                       .)
         [NxtTask]
         .

   NxtTask
      =     Tasks.

   Params
      =     
         SYNC
         Type<out type>              
         idConst                       (.
                                          # parameter declaration
                                          symId = self.LexString()
                                          sym = Symbol(symId,type)
                                          self.declareVar(sym)

                                          # add parameter to procedure
                                          self.currentProc.addParam(sym)
                                          print ("Se agrego a proc %s el parametro %s" % (self.currentProc.symId, symId))



                                       .)
         [NxtParam].

   NxtParam
      =     ',' Params.

   Block
      =     (VarDec | VarOp | IfStmt | WhileStmt | ForStmt | WriteStmt | ReadStmt | ResturnStmt | TaskCall | BreakStmt) [NxtBlock].

   NxtBlock
      =     Block.

   IfStmt
      =
         SYNC  
         "If" '(' Expression ')'
                                       (.
                                          self.quads.falseJmp()
                                       .)
         Block [
         SYNC
                                       (.
                                          self.quads.elseStmt()
                                       .)
         "Else" Block]
                                       (.
                                          self.quads.endIf()
                                       .) 
         SYNC
         "End".

   WhileStmt
      =     
         SYNC
         "While"  '(' 
                                 (.
                                       self.quads.jumps.append(Quad.QuadId)
                                 .)
         Expression 
                                 (.
                                       self.quads.falseJmp()

                                 .)
         ')' Block 
                                 (.
                                       self.quads.endWhile()
                                 .)
         SYNC
         "End".

   ForStmt
      =  
         SYNC   
         "For" idConst "In" Range Block 
         SYNC
         "End".

   Range
      =     '(' Expression ',' Expression [',' Expression ] ')'.

   WriteStmt         
      =  
         SYNC  
         "Print" '(' Expression ')' 
         SYNC
         ';'.

   ReadStmt       
      =  
         SYNC   
         "Read" '(' idConst ')' 
         SYNC
         ';'.

   ResturnStmt    
      =  
         SYNC   
         "Return" Expression 
         SYNC
         ';'.

   TaskCall
      =
         '('
         Arguments
         ')'
         .

   BreakStmt         
      =  
         SYNC   
         "Break" 
         SYNC
         ';'.

   RobotFunc
      =     '.' (RobotLook | RobotPaint | RobotWall | RobotMove).

   RobotLook         
      =     (Look | LookStmt).

   Look              
      =     "lookRight" | "lookLeft" | "lookBack" | "lookNorth" | "lookEast" | "lookSouth" | "lookWest". 

   LookStmt       
      =     "look" '(' Expression ')'.

   RobotPaint     
      =     (Paint | PaintStmt).

   Paint             
      =     ("paintFront" | "paintHere" | "paintBack" | "paintRight" | "paintLeft") '.' ("Red" | "Green" | "Blue").

   PaintStmt         
      =     "paint" '(' Expression ',' Expression ')'.

   RobotWall   
      =     (Wall | WallStmt).

   Wall              
      =     "wallFront" | "wallBack" | "wallLeft" | "wallRight".

   WallStmt       
      =     "wall" '(' Expression ')'.

   RobotMove         
      =     (Move | MoveStmt).

   Move              
      =     "moveFront" | "moveBack".

   MoveStmt       
      =     "move" '(' Expression ')'.
END RoboParl.